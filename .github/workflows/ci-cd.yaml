name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Dispara a pipeline em pushes para a branch main
  pull_request:
    branches:
      - main  # Dispara a pipeline para pull requests para a branch main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 1. Verifica o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Garante que todas as referências do repositório estão disponíveis

      # 2. Configura o Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Faz login no Docker Registry (Docker Hub ou outro)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Constrói e faz o push da imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./ASCAN-app/app  # Diretório onde está o código do app
          file: ./ASCAN-app/Dockerfile  # Caminho para o Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/app:latest

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push  # Só executa após o job "build-and-push"

    steps:
      # 1. Verifica o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Configura o acesso ao cluster Kubernetes
      - name: Set up Kubernetes cluster
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: $HOME/.kube/config

      # 3. Faz o deploy usando Helm
      - name: Deploy with Helm
        run: |
          helm upgrade --install app ./ASCAN-app/helm \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/app \
            --set image.tag=latest -n app