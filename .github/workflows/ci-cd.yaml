name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: vinitxc/app  # Image name on Docker Hub

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the latest tag (assume format X.Y.Z)
        id: get_tag
        run: |
          set -e
          # Obtém a tag mais recente ou define uma padrão (0.1.0)
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        
      - name: Determine version bump (major, minor, patch)
        id: bump_version
        run: |
          set -e
          # Recupera a tag da etapa anterior
          TAG=${{ steps.get_tag.outputs.tag }}
      
          # Remove o 'v' da versão (v1.2.3 -> 1.2.3)
          VERSION=${TAG#v}
          
          # Desestrutura o x, y e z
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Identifica o tipo de commit para decidir se será major, minor ou patch
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          if [[ $COMMIT_MESSAGE == feat* ]]; then
            ((MINOR++))
            PATCH=0
          elif [[ $COMMIT_MESSAGE == fix* ]]; then
            ((PATCH++))
          fi
        
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: /usr/bin/bash
        env:
          IMAGE_NAME: ***/app
       
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ASCAN-app/app
          file: ./ASCAN-app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Create Git tag and push
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubernetes cluster
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install app ./iac/addons/app/helm \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/app \
            --set image.tag=${{ steps.bump_version.outputs.new_version }} -n app \
          
      - name: Update image
        run: |
          sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl gawk
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          mkdir -p $HOME/.kube
          KUBECONFIG_FILE="$HOME/.kube/config"
          echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG_FILE
          export KUBECONFIG=$KUBECONFIG_FILE
          echo "Reiniciando o Deployment para atualizar a imagem..."
          kubectl rollout restart deployment app-deployment -n app
          